import React, { useState, useEffect } from 'react';
import { useCart } from '../contexts/CartContext';
import { Link } from 'react-router-dom';
import SEO from '../components/SEO';
import { loadStripe, StripeElementsOptions } from '@stripe/stripe-js';
import { Elements } from '@stripe/react-stripe-js';
import CheckoutForm from '../components/CheckoutForm';
import LoadingSpinner from '../components/LoadingSpinner';

// IMPORTANT: Replace with your actual publishable key
const stripePromise = loadStripe('pk_test_51PcbO7RsgfplLnehtjRGeE4YadTYHloObTd2MbF2F3g5yA1rKf43zW8WpG45jXg0mq1b0eDgRo8B3j2XnEUp2G9K00d23VWl1J');

const CheckoutPage: React.FC = () => {
    const { cartItems, totalPrice } = useCart();
    const [clientSecret, setClientSecret] = useState('');

    useEffect(() => {
        // Simulate creating a PaymentIntent on the server
        // In a real application, you would make a fetch request to your backend here
        // The backend would create a PaymentIntent with the order amount and return its client_secret
        const createPaymentIntent = async () => {
             // In a real app, this amount would be calculated on the server to prevent manipulation
            const amountInCents = Math.round(totalPrice * 100);
            
            // This is a mock of what your backend would do.
            // We are just creating a placeholder secret. In a real scenario, this
            // would involve a secure call to Stripe's API from your server.
            console.log(`Simulating creation of Payment Intent for amount: ${amountInCents} cents`);
            // This is a FAKE client secret for demonstration. A real one would be generated by your backend.
            setClientSecret(`pi_${Date.now()}_secret_${Math.random().toString(36).substring(7)}`);
        };
        
        if (totalPrice > 0) {
            createPaymentIntent();
        }

    }, [totalPrice]);

    const options: StripeElementsOptions = {
        clientSecret,
        appearance: {
            theme: 'stripe',
             variables: {
                colorPrimary: '#0D2C54',
                colorBackground: '#ffffff',
                colorText: '#30313d',
                colorDanger: '#df1b41',
                fontFamily: 'Ideal Sans, system-ui, sans-serif',
                spacingUnit: '4px',
                borderRadius: '4px',
            },
        },
    };

    if (cartItems.length === 0) {
        return (
            <div className="text-center py-20">
                <h1 className="text-2xl font-bold text-brand-blue">Your cart is empty.</h1>
                <p className="text-gray-600 mt-2 mb-6">You can't proceed to checkout without any items.</p>
                <Link to="/products" className="inline-block bg-brand-gold text-brand-blue font-bold py-3 px-8 rounded-full hover:bg-yellow-400">
                    Go Shopping
                </Link>
            </div>
        );
    }

    return (
        <div className="bg-white py-20">
            <SEO title="Checkout" description="Complete your purchase securely." />
            <div className="container mx-auto px-6">
                <h1 className="text-4xl font-extrabold text-brand-blue mb-8 text-center">Checkout</h1>
                <div className="grid lg:grid-cols-5 gap-12">
                    {/* Payment Details */}
                    <div className="lg:col-span-3 bg-brand-light p-8 rounded-lg shadow-lg">
                        <h2 className="text-2xl font-bold text-brand-blue mb-2">Payment Information</h2>
                        <p className="text-gray-600 mb-6">
                            Securely pay with your preferred method. Options like Google Pay or Apple Pay will appear if available on your device.
                        </p>
                        {clientSecret ? (
                            <Elements options={options} stripe={stripePromise}>
                                <CheckoutForm />
                            </Elements>
                        ) : (
                           <div className="flex justify-center items-center h-48">
                             <LoadingSpinner />
                           </div>
                        )}
                    </div>

                    {/* Order Summary */}
                    <div className="lg:col-span-2">
                        <div className="bg-brand-light p-6 rounded-lg shadow-lg sticky top-28">
                             <h2 className="text-2xl font-bold text-brand-blue border-b pb-4 mb-4">Order Summary</h2>
                             <div className="space-y-3 mb-4 max-h-64 overflow-y-auto">
                                {cartItems.map(item => (
                                    <div key={item.id} className="flex justify-between items-center text-sm">
                                        <span className="text-gray-800">{item.name} x{item.quantity}</span>
                                        <span className="font-semibold">${(item.price * item.quantity).toFixed(2)}</span>
                                    </div>
                                ))}
                             </div>
                             <div className="flex justify-between font-bold text-xl text-brand-blue border-t pt-4 mt-4">
                                <span>Total</span>
                                <span>${totalPrice.toFixed(2)}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CheckoutPage;